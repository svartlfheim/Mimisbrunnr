// Code generated by mockery v2.10.0. DO NOT EDIT.

package cmdmocks

import (
	mock "github.com/stretchr/testify/mock"
	server "github.com/svartlfheim/mimisbrunnr/internal/server"
)

// ServerForHandler is an autogenerated mock type for the serverForHandler type
type ServerForHandler struct {
	mock.Mock
}

type ServerForHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerForHandler) EXPECT() *ServerForHandler_Expecter {
	return &ServerForHandler_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: cfg
func (_m *ServerForHandler) Start(cfg server.ServerConfig) error {
	ret := _m.Called(cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(server.ServerConfig) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerForHandler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ServerForHandler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//  - cfg server.ServerConfig
func (_e *ServerForHandler_Expecter) Start(cfg interface{}) *ServerForHandler_Start_Call {
	return &ServerForHandler_Start_Call{Call: _e.mock.On("Start", cfg)}
}

func (_c *ServerForHandler_Start_Call) Run(run func(cfg server.ServerConfig)) *ServerForHandler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(server.ServerConfig))
	})
	return _c
}

func (_c *ServerForHandler_Start_Call) Return(_a0 error) *ServerForHandler_Start_Call {
	_c.Call.Return(_a0)
	return _c
}
