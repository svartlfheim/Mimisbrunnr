// Code generated by mockery v2.10.0. DO NOT EDIT.

package cmdmocks

import mock "github.com/stretchr/testify/mock"

// CommandHandler is an autogenerated mock type for the commandHandler type
type CommandHandler struct {
	mock.Mock
}

type CommandHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandHandler) EXPECT() *CommandHandler_Expecter {
	return &CommandHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: args
func (_m *CommandHandler) Execute(args []string) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CommandHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - args []string
func (_e *CommandHandler_Expecter) Execute(args interface{}) *CommandHandler_Execute_Call {
	return &CommandHandler_Execute_Call{Call: _e.mock.On("Execute", args)}
}

func (_c *CommandHandler_Execute_Call) Run(run func(args []string)) *CommandHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *CommandHandler_Execute_Call) Return(_a0 error) *CommandHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}
