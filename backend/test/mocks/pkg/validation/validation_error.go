// Code generated by mockery v2.10.0. DO NOT EDIT.

package validationmocks

import mock "github.com/stretchr/testify/mock"

// ValidationError is an autogenerated mock type for the ValidationError type
type ValidationError struct {
	mock.Mock
}

type ValidationError_Expecter struct {
	mock *mock.Mock
}

func (_m *ValidationError) EXPECT() *ValidationError_Expecter {
	return &ValidationError_Expecter{mock: &_m.Mock}
}

// Message provides a mock function with given fields:
func (_m *ValidationError) Message() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidationError_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type ValidationError_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *ValidationError_Expecter) Message() *ValidationError_Message_Call {
	return &ValidationError_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *ValidationError_Message_Call) Run(run func()) *ValidationError_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ValidationError_Message_Call) Return(_a0 string) *ValidationError_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

// Parameters provides a mock function with given fields:
func (_m *ValidationError) Parameters() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ValidationError_Parameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parameters'
type ValidationError_Parameters_Call struct {
	*mock.Call
}

// Parameters is a helper method to define mock.On call
func (_e *ValidationError_Expecter) Parameters() *ValidationError_Parameters_Call {
	return &ValidationError_Parameters_Call{Call: _e.mock.On("Parameters")}
}

func (_c *ValidationError_Parameters_Call) Run(run func()) *ValidationError_Parameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ValidationError_Parameters_Call) Return(_a0 map[string]string) *ValidationError_Parameters_Call {
	_c.Call.Return(_a0)
	return _c
}

// Path provides a mock function with given fields:
func (_m *ValidationError) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidationError_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type ValidationError_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *ValidationError_Expecter) Path() *ValidationError_Path_Call {
	return &ValidationError_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *ValidationError_Path_Call) Run(run func()) *ValidationError_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ValidationError_Path_Call) Return(_a0 string) *ValidationError_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

// Rule provides a mock function with given fields:
func (_m *ValidationError) Rule() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidationError_Rule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rule'
type ValidationError_Rule_Call struct {
	*mock.Call
}

// Rule is a helper method to define mock.On call
func (_e *ValidationError_Expecter) Rule() *ValidationError_Rule_Call {
	return &ValidationError_Rule_Call{Call: _e.mock.On("Rule")}
}

func (_c *ValidationError_Rule_Call) Run(run func()) *ValidationError_Rule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ValidationError_Rule_Call) Return(_a0 string) *ValidationError_Rule_Call {
	_c.Call.Return(_a0)
	return _c
}
