// Code generated by mockery v2.10.0. DO NOT EDIT.

package rdbmocks

import (
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// ConnectionOpener is an autogenerated mock type for the connectionOpener type
type ConnectionOpener struct {
	mock.Mock
}

type ConnectionOpener_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionOpener) EXPECT() *ConnectionOpener_Expecter {
	return &ConnectionOpener_Expecter{mock: &_m.Mock}
}

// ForPostgres provides a mock function with given fields: u, pass, db, h, port, s
func (_m *ConnectionOpener) ForPostgres(u string, pass string, db string, h string, port string, s string) (*sqlx.DB, error) {
	ret := _m.Called(u, pass, db, h, port, s)

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *sqlx.DB); ok {
		r0 = rf(u, pass, db, h, port, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(u, pass, db, h, port, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionOpener_ForPostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForPostgres'
type ConnectionOpener_ForPostgres_Call struct {
	*mock.Call
}

// ForPostgres is a helper method to define mock.On call
//  - u string
//  - pass string
//  - db string
//  - h string
//  - port string
//  - s string
func (_e *ConnectionOpener_Expecter) ForPostgres(u interface{}, pass interface{}, db interface{}, h interface{}, port interface{}, s interface{}) *ConnectionOpener_ForPostgres_Call {
	return &ConnectionOpener_ForPostgres_Call{Call: _e.mock.On("ForPostgres", u, pass, db, h, port, s)}
}

func (_c *ConnectionOpener_ForPostgres_Call) Run(run func(u string, pass string, db string, h string, port string, s string)) *ConnectionOpener_ForPostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *ConnectionOpener_ForPostgres_Call) Return(_a0 *sqlx.DB, _a1 error) *ConnectionOpener_ForPostgres_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
