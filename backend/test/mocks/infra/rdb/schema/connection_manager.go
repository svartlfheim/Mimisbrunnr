// Code generated by mockery v2.10.0. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// ConnectionManager is an autogenerated mock type for the connectionManager type
type ConnectionManager struct {
	mock.Mock
}

type ConnectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionManager) EXPECT() *ConnectionManager_Expecter {
	return &ConnectionManager_Expecter{mock: &_m.Mock}
}

// GetConnection provides a mock function with given fields:
func (_m *ConnectionManager) GetConnection() (*sqlx.DB, error) {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionManager_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type ConnectionManager_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
func (_e *ConnectionManager_Expecter) GetConnection() *ConnectionManager_GetConnection_Call {
	return &ConnectionManager_GetConnection_Call{Call: _e.mock.On("GetConnection")}
}

func (_c *ConnectionManager_GetConnection_Call) Run(run func()) *ConnectionManager_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionManager_GetConnection_Call) Return(_a0 *sqlx.DB, _a1 error) *ConnectionManager_GetConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
